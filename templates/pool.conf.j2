; {{ ansible_managed }}
;;;;;;;;;;;;;;;;;;;;;;
; Pool Configuration ;
;;;;;;;;;;;;;;;;;;;;;;
[{{php_fpm_pool.name}}]

; The address on which to accept FastCGI requests.
listen = {{ php_fpm_pool.listen }}

; Maximum length of request queue (default: -1)
listen.backlog = {{ php_fpm_pool.listen_backlog | default(php_fpm_listen_backlog) }}

listen.allowed_clients = {{ php_fpm_pool.listen_allowed_clients | default(php_fpm_listen_allowed_clients) | join(',') }}

; Set permissions for the unix socket, if one is used.
{% if php_fpm_pool.listen_owner is defined%}
listen.owner = {{ php_fpm_pool.listen_owner }}
{% endif %}
{% if php_fpm_pool.listen_group is defined %}
listen.group = {{ php_fpm_pool.listen_group }}
{% endif %}
listen.mode = {{ php_fpm_pool.listen_mode | default(php_fpm_listen_mode) }}
{% if php_fpm_pool.listen_acl_users is defined %}
listen.acl_users = {{ php_fpm_pool.listen_acl_users }}
{% endif %}
{% if php_fpm_pool.listen_acl_groups is defined %}
listen.acl_groups = {{ php_fpm_pool.listen_acl_groups }}
{% endif %}

; Unix user of FPM processes
user = {{ php_fpm_pool.user }}
{% if php_fpm_pool.group is defined %}
; Unix group of FPM processes
group = {{ php_fpm_pool.group }}
{% endif %}

; Choose how the process manager will control the number of child processes.
; Possible values: static, ondemand, dynamic. This option is mandatory.
; static - the number of child processes is fixed (pm.max_children).
; ondemand - the processes spawn on demand (when requested, as opposed to dynamic, where pm.start_servers are started when the service is started.
; dynamic - the number of child processes is set dynamically based on the following directives: pm.max_children, pm.start_servers, pm.min_spare_servers, pm.max_spare_servers.
pm = {{ php_fpm_pool.pm }}

; The number of child processes to be created when pm is set to static and the maximum number of child processes to be created when pm is set to dynamic.
; This option sets the limit on the number of simultaneous requests that will be served.
{% if php_fpm_pool.pm == "ondemand" %}
{% if php_fpm_pool.pm_max_children is defined %}
pm.max_children = {{ php_fpm_pool.pm_max_children }}
{% endif %}
{% else %}
pm.max_children = {{ php_fpm_pool.pm_max_children }}
{% endif %}

{% if php_fpm_pool.pm_start_servers is defined %}
; The number of child processes created on startup (used only when pm is set to dynamic).
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2.
pm.start_servers = {{ php_fpm_pool.pm_start_servers }}
{% endif %}
{% if php_fpm_pool.pm == "dynamic" %}
; The desired minimum number of idle server processes (used only when pm is set to dynamic).
pm.min_spare_servers = {{ php_fpm_pool.pm_min_spare_servers}}
{% endif %}
{% if php_fpm_pool.pm == "dynamic" %}
; The desired maximum number of idle server processes (used only when pm is set to dynamic).
pm.max_spare_servers = {{ php_fpm_pool.pm_max_spare_servers}}
{% endif %}

; The number of seconds after which an idle process will be killed (used only when pm is set to ondemand).
pm.process_idle_timeout = {{ php_fpm_pool.pm_process_idle_timeout | default(php_fpm_pm_process_idle_timeout) }}

; The number of requests each child process should execute before respawning.
pm.max_requests = {{ php_fpm_pool.pm_max_requests | default(php_fpm_pm_max_requests)}}

{% if php_fpm_pool.pm_status_path is defined %}
; The URI to view the FPM status page.
pm.status_path = {{ php_fpm_pool.pm_status_path }}

{% endif %}
{% if php_fpm_pool.ping_path is defined %}
; The ping URI to call the monitoring page of FPM. This could be used to test from outside that FPM is alive and responding.
ping.path = {{ php_fpm_pool.ping_path }}

{% endif %}
; The response to a ping request. The response is formatted as text/plain with a 200 response code.
ping.response = {{ php_fpm_pool.ping_response | default(php_fpm_ping_response) }}

{% if php_fpm_pool.processes_priority is defined %}
process.priority = {{ php_fpm_pool.processes_priority }}

{% endif %}
{% if php_fpm_pool.prefix is defined %}
; Specify prefix for path evaluation
prefix = {{ php_fpm_pool.prefix }}

{% endif %}
; The timeout for serving a single request after which the worker process will be killed.
; This option should be used when the 'max_execution_time' ini option does not stop script execution for some reason.
request_terminate_timeout = {{ php_fpm_pool.request_terminate_timeout | default(php_fpm_request_terminate_timeout) }}

; The timeout for serving a single request after which a PHP backtrace will be dumped to the 'slowlog' file.
request_slowlog_timeout = {{ php_fpm_pool.request_slowlog_timeout | default(php_fpm_request_slowlog_timeout) }}

; The log file for slow requests.
slowlog = {{ php_fpm_pool.slowlog | default(php_fpm_slowlog) }}

{% if php_fpm_pool.rlimit_files is defined %}
; Open file descriptor rlimit for child processes in this pool.
rlimit_files = {{ php_fpm_pool.rlimit_files }}

{% endif %}
{% if php_fpm_pool.rlimit_core is defined %}
; Max core size rlimit for child processes in this pool.
rlimit_core = {{ php_fpm_pool.rlimit_core }}

{% endif %}
{% if php_fpm_pool.chroot is defined %}
; Chroot to this directory at the start.
chroot = {{ php_fpm_pool.chroot }}

{% endif %}
{% if php_fpm_pool.chdir is defined %}
; Chdir to this directory at the start.
chdir = {{ php_fpm_pool.chdir }}

{% endif %}
; Redirect worker stdout and stderr into main error log.
catch_workers_output = {% if php_fpm_pool.catch_workers_output | default(php_fpm_catch_workers_output) %}yes{% else %}no{% endif %}

; Clear environment in FPM workers.
clear_env = {% if php_fpm_pool.clear_env | default(php_fpm_clear_env) %}yes{% else %}no{% endif %}

; Limits the extensions of the main script FPM will allow to parse.
security.limit_extensions = {{ php_fpm_pool.security_limit_extensions | default(php_fpm_security_limit_extensions) | join(' ') }}
{% if php_fpm_pool.access_log is defined %}
access.log = {{ php_fpm_pool.access_log }}
access.format = {{ php_fpm_pool.access_format | default(php_fpm_access_format) }}
{% endif %}

; Environment variables
{% for key, value in ( php_fpm_pool.envs | default({}) ).items() %}
env[{{ key }}] = {{ value }}
{% endfor %}

; PHP flags
{% for key, value in ( php_fpm_pool.php_flags | default({}) ).items() %}
php_flag[{{ key }}] = {% if value %}on{% else %}off{% endif %}
{% endfor %}

; PHP admin flags (not overridable)
{% for key, value in ( php_fpm_pool.php_admin_flags | default({}) ).items() %}
php_admin_flag[{{ key }}] = {% if value %}on{% else %}off{% endif %}
{% endfor %}

; PHP values
{% for key, value in ( php_fpm_pool.php_values | default({}) ).items() %}
php_value[{{ key }}] = {{ value }}
{% endfor %}

; PHP admin values (not overridable)
{% for key, value in ( php_fpm_pool.php_admin_values | default({}) ).items() %}
php_admin_value[{{ key }}] = {{ value }}
{% endfor %}
